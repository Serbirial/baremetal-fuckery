// sys/fb.go
package sys

import "unsafe"

var fbWidth uint32 = 640
var fbHeight uint32 = 480
var fbPitch uint32
var fbBuffer *uint32

// Mailbox base address for Pi 2/3/Zero2W (BCM2835/2837)
const (
	MAILBOX_BASE   = 0x3F00B880
	MAILBOX_READ   = 0x00
	MAILBOX_STATUS = 0x18
	MAILBOX_WRITE  = 0x20
	MAILBOX_FULL   = 0x80000000
	MAILBOX_EMPTY  = 0x40000000
)

// Channels
const (
	MAILBOX_CHANNEL_FB = 1 // framebuffer
)

// Framebuffer structure for mailbox request
type fbInfo struct {
	width      uint32
	height     uint32
	virtWidth  uint32
	virtHeight uint32
	pitch      uint32
	depth      uint32
	xOffset    uint32
	yOffset    uint32
	pointer    uint32
	size       uint32
}

// Initialize the framebuffer via mailbox
func FbInit() {
	// Request structure for framebuffer
	info := fbInfo{
		width:      fbWidth,
		height:     fbHeight,
		virtWidth:  fbWidth,
		virtHeight: fbHeight,
		depth:      32, // 32-bit pixels
	}

	// Align the address to 16 bytes as required by mailbox protocol
	addr := uintptr(unsafe.Pointer(&info)) &^ 0xF

	// Send the framebuffer request to GPU
	mailboxWrite(uint32(addr), MAILBOX_CHANNEL_FB)

	// Wait for the GPU to respond
	resp := mailboxRead(MAILBOX_CHANNEL_FB)
	if resp == 0 {
		// GPU did not respond properly
		return
	}

	// At this point, GPU has updated our fbInfo struct
	// pointer = framebuffer physical address
	// pitch   = bytes per row
	if info.pointer == 0 || info.pitch == 0 {
		// Something went wrong; framebuffer not allocated
		return
	}

	// Store framebuffer info globally
	fbPitch = info.pitch
	fbBuffer = (*uint32)(unsafe.Pointer(uintptr(info.pointer)))

	// Optional: clear the framebuffer to black
	buf := unsafe.Slice(fbBuffer, fbWidth*fbHeight)
	for i := range buf {
		buf[i] = 0x00000000
	}
}

// Very simple 8x8 font (1 = pixel on, 0 = off)
// Only supports printable ASCII 32..127 for now
// 8x8 ASCII font for printable characters 32..127
// Each byte represents one row of 8 pixels (MSB = leftmost pixel)
var font8x8 = [96][8]byte{
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ' '
	{0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00}, // '!'
	{0x36, 0x36, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00}, // '"'
	{0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00}, // '#'
	{0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00}, // '$'
	{0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00}, // '%'
	{0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00}, // '&'
	{0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00}, // '''
	{0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00}, // '('
	{0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00}, // ')'
	{0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00}, // '*'
	{0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00}, // '+'
	{0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06, 0x00}, // ','
	{0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00}, // '-'
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00}, // '.'
	{0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00}, // '/'
	{0x3E, 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x3E, 0x00}, // '0'
	{0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00}, // '1'
	{0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00}, // '2'
	{0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00}, // '3'
	{0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00}, // '4'
	{0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00}, // '5'
	{0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00}, // '6'
	{0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00}, // '7'
	{0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00}, // '8'
	{0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00}, // '9'
	{0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x00}, // ':'
	{0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x06, 0x00}, // ';'
	{0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00}, // '<'
	{0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00}, // '='
	{0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00}, // '>'
	{0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00}, // '?'
	{0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00}, // '@'
	{0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00}, // 'A'
	{0x3F, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x3F, 0x00}, // 'B'
	{0x1E, 0x33, 0x03, 0x03, 0x03, 0x33, 0x1E, 0x00}, // 'C'
	{0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00}, // 'D'
	{0x3F, 0x03, 0x03, 0x1F, 0x03, 0x03, 0x3F, 0x00}, // 'E'
	{0x3F, 0x03, 0x03, 0x1F, 0x03, 0x03, 0x03, 0x00}, // 'F'
	{0x1E, 0x33, 0x03, 0x03, 0x73, 0x33, 0x1E, 0x00}, // 'G'
	{0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00}, // 'H'
	{0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00}, // 'I'
	{0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x30, 0x00}, // 'J'
	{0x33, 0x33, 0x1B, 0x0F, 0x1B, 0x33, 0x33, 0x00}, // 'K'
	{0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x3F, 0x00}, // 'L'
	{0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00}, // 'M'
	{0x33, 0x33, 0x73, 0x7B, 0x3F, 0x3B, 0x33, 0x00}, // 'N'
	{0x1E, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x00}, // 'O'
	{0x3F, 0x33, 0x33, 0x3F, 0x03, 0x03, 0x03, 0x00}, // 'P'
	{0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00}, // 'Q'
	{0x3F, 0x33, 0x33, 0x3F, 0x1B, 0x33, 0x33, 0x00}, // 'R'
	{0x1E, 0x33, 0x03, 0x1E, 0x30, 0x33, 0x1E, 0x00}, // 'S'
	{0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00}, // 'T'
	{0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x00}, // 'U'
	{0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00}, // 'V'
	{0x63, 0x63, 0x6B, 0x7F, 0x7F, 0x77, 0x63, 0x00}, // 'W'
	{0x33, 0x33, 0x1E, 0x0C, 0x1E, 0x33, 0x33, 0x00}, // 'X'
	{0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00}, // 'Y'
	{0x3F, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x3F, 0x00}, // 'Z'
	{0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0E, 0x00}, // '['
	{0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00}, // '\'
	{0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x00}, // ']'
	{0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00}, // '^'
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF}, // '_'
	{0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00}, // '`'
	{0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00}, // 'a'
	{0x03, 0x03, 0x1F, 0x33, 0x33, 0x33, 0x1F, 0x00}, // 'b'
	{0x00, 0x00, 0x1E, 0x03, 0x03, 0x33, 0x1E, 0x00}, // 'c'
	{0x30, 0x30, 0x3E, 0x33, 0x33, 0x33, 0x3E, 0x00}, // 'd'
	{0x00, 0x00, 0x1E, 0x33, 0x3F, 0x03, 0x1E, 0x00}, // 'e'
	{0x1C, 0x36, 0x06, 0x0F, 0x06, 0x06, 0x0F, 0x00}, // 'f'
	{0x00, 0x00, 0x3E, 0x33, 0x33, 0x3E, 0x30, 0x1F}, // 'g'
	{0x03, 0x03, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00}, // 'h'
	{0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00}, // 'i'
	{0x18, 0x00, 0x1C, 0x18, 0x18, 0x18, 0x1B, 0x0E}, // 'j'
	{0x03, 0x03, 0x33, 0x1B, 0x0F, 0x1B, 0x33, 0x00}, // 'k'
	{0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00}, // 'l'
	{0x00, 0x00, 0x3B, 0x7F, 0x7F, 0x63, 0x63, 0x00}, // 'm'
	{0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00}, // 'n'
	{0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00}, // 'o'
	{0x00, 0x00, 0x1F, 0x33, 0x33, 0x1F, 0x03, 0x03}, // 'p'
	{0x00, 0x00, 0x3E, 0x33, 0x33, 0x3E, 0x30, 0x30}, // 'q'
	{0x00, 0x00, 0x1B, 0x1E, 0x03, 0x03, 0x03, 0x00}, // 'r'
	{0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00}, // 's'
	{0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00}, // 't'
	{0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00}, // 'u'
	{0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00}, // 'v'
	{0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00}, // 'w'
	{0x00, 0x00, 0x33, 0x1E, 0x0C, 0x1E, 0x33, 0x00}, // 'x'
	{0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F}, // 'y'
	{0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00}, // 'z'
	{0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00}, // '{'
	{0x0C, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x00}, // '|'
	{0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00}, // '}'
	{0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // '~'
}

// Draw a single character at x, y (pixels)
func FbPutChar(x, y int, c byte, color uint32) {
	if c < 32 || c > 127 {
		return // only printable ASCII
	}

	glyph := font8x8[c-32]

	// Convert framebuffer pointer to a slice
	buf := unsafe.Slice(fbBuffer, fbWidth*fbHeight)

	for row := 0; row < 8; row++ {
		bits := glyph[row]
		for col := 0; col < 8; col++ {
			if (bits>>uint(7-col))&1 != 0 {
				px := x + col
				py := y + row

				// Bounds check
				if px >= 0 && px < int(fbWidth) && py >= 0 && py < int(fbHeight) {
					buf[py*int(fbWidth)+px] = color
				}
			}
		}
	}
}

// Print a string at x, y in pixels
func FbPutString(x, y int, s string, color uint32) {
	for i := 0; i < len(s); i++ {
		FbPutChar(x+i*8, y, s[i], color) // advance 8 pixels per character
	}
}
